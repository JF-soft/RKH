/**
\page trazer Trazer Reference Manual

\image html trazer.png

\n
Trazer is a visualization tool that works in conjuntion with the RKH 
framework built in trace facility. Trazer gives the possibility to display 
selectively the recording of all events of your system, state machines, 
queues, timers, etc.
Trazer helps you to faster troubleshooting especially on complex problems 
where a debugger is not sufficient, by providing a simple consolidated, 
human-readable textual output. Given the RKH cross plataform portability, 
trace data may come from 8, 16, or 32-bits platforms. In order to that Trazer 
need to be configured to support this diversity of plataform and the wide 
range of RKH framework configurations. The following figure shows the 
relationship between framework RKH and host-application Trazer.

\image html rkh_trazer.jpg

This manual includes:

- \ref trazer_cfg
- \ref trazer_human_format
- \ref rev_page_trazer

<HR>
\section trazer_cfg Configuration

Before using %Trazer you must provides the listed configurations:

- \ref trazer_command to configure comunication link and general options.
- \ref trazer_config (\subpage trazer_cfg_) to setup all target dependencies, 
such as pointer sizes, signal sizes, etc.

<HR>
\section trazer_command Command-line parameters

<TABLE SUMMARY="Trazer Command Line" cellSpacing=4 cellPadding=1 border=0
ALIGN="center" VALIGN="middle">
  <TR bgColor="#c8cedc">
    <TD><B>&nbsp;Option</B></TD>
    <TD><B>&nbsp;Example</B></TD>
    <TD><B>&nbsp;Comments</B></TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>-h</TD>
    <TD>-h</TD>
    <TD>Help. Prints the summary of options</TD>
  </TR>

  <TR bgColor="#c0c0c0">
    <TD>-q</TD>
    <TD>-q</TD>
    <TD>Quiet mode (no stdout output)</TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>-v</TD>
    <TD>-v</TD>
    <TD>Visualize Traze version and compatibility with RKH framework</TD>
  </TR>

  <TR bgColor="#c0c0c0">
    <TD>-o</TD>
    <TD>-o trazer.txt</TD>
    <TD>Produce output to the specified file</TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>-c</TD>
    <TD>-c COM1 115200 8N1</TD>
    <TD>COM port and baudrate selection. Not compatible with -t, -f</TD>
  </TR>

  <TR bgColor="#c0c0c0">
    <TD>-t</TD>
    <TD>-t 6602</TD>
    <TD>TCP/IP server and port number. Not compatible with -c, -f</TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>-f</TD>
    <TD>-f trace.bin</TD>
    <TD>File input selection. Not compatible with -c, -t</TD>
  </TR>

</TABLE>


<HR>
\section trazer_config Configuration file

%Trazer is designed to work with all possible target CPU, which requires a wide range of configurability. 
For example, for any given target CPU, Trazer must "know" the size of object pointers, event size, timestamp size and so on. 
You can provide this information by two ways: 
  - include \subpage trazer_cfg_ configuration file in the same trazer.exe directory.
  - setup the target aplication to call to \subpage RKH_TR_FWK_TCFG and perform the streaming the RKH configuration at startup.

If \subpage trazer_cfg_ is not found, assuming default settings, any configuration streaming received overwrite settings. The following table summarizes the \subpage trazer_cfg_ content.

<TABLE SUMMARY="Trazer config" cellSpacing=4 cellPadding=1 border=0
ALIGN="center" VALIGN="middle">
  <TR bgColor="#c8cedc">
    <TD><B>&nbsp;Parameter</B></TD>
    <TD><B>&nbsp;Valid Values</B></TD>
    <TD><B>&nbsp;Must match RKH config (rkhcfg.h)</B></TD>
    <TD><B>&nbsp;Comments</B></TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>\c TRAZER_SIZEOF_SIG</TD>
    <TD>1, 2, 4</TD>
    <TD>\c #RKH_SIZEOF_EVENT</TD>
    <TD>Event Signal size in bytes.</TD>
  </TR>

  <TR bgColor="#c0c0c0">
    <TD>\c TRAZER_SIZEOF_TSTAMP</TD>
    <TD>1, 2, 4</TD>
    <TD>\c #RKH_TRC_SIZEOF_TSTAMP</TD>
    <TD>Bytes quantity used by the trace record timestamp.</TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>\c TRAZER_SIZEOF_POINTER</TD>
    <TD>1, 2, 4</TD>
    <TD>\c #RKH_TRC_SIZEOF_POINTER</TD>
    <TD>Size in bytes of void pointer.</TD>
  </TR>

  <TR bgColor="#c0c0c0">
    <TD>\c TRAZER_SIZEOF_NTIMER</TD>
    <TD>1, 2, 4</TD>
    <TD>\c #RKH_TIM_SIZEOF_NTIMER</TD>
    <TD>Dynamic range of time delays measured in ticks and expresed in bytes.</TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>\c TRAZER_SIZEOF_NBLOCK</TD>
    <TD>1, 2, 4</TD>
    <TD>\c #RKH_MP_SIZEOF_NBLOCK</TD>
    <TD>Size in bytes of number of memory block size.</TD>
  </TR>

  <TR bgColor="#c0c0c0">
    <TD>\c TRAZER_SIZEOF_NELEM</TD>
    <TD>1, 2, 4</TD>
    <TD>\c #RKH_RQ_SIZEOF_NELEM</TD>
    <TD>Maximum number of elements in bytes that any queue can contain.</TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>\c TRAZER_SIZEOF_ESIZE</TD>
    <TD>1, 2, 4</TD>
    <TD>\c #RKH_SIZEOF_ESIZE</TD>
    <TD>Data type of event size, in bytes.</TD>
  </TR>

  <TR bgColor="#c0c0c0">
    <TD>\c TRAZER_EN_NSEQ</TD>
    <TD>0, 1</TD>
    <TD>\c #RKH_TRC_EN_NSEQ</TD>
    <TD> Enable/Disable Number of Sequence use in trace stream.</TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>\c TRAZER_EN_CHK</TD>
    <TD>0, 1</TD>
    <TD>\c #RKH_TRC_EN_CHK</TD>
    <TD> Enable/Disable Checksum use in trace stream.</TD>
  </TR>

  <TR bgColor="#c0c0c0">
    <TD>\c TRAZER_EN_TSTAMP</TD>
    <TD>0, 1</TD>
    <TD>\c #RKH_TRC_EN_TSTAMP</TD>
    <TD> Enable/Disable Time stamp use in trace stream.</TD>
  </TR>

</TABLE>

Your must ensure that Trazer configuration, match exactly with the target system under test,
otherwise will be unable to parse the trace stream, and these errors would be shown:
<TABLE SUMMARY="Trazer errors" cellSpacing=4 cellPadding=1 border=0
ALIGN="center" VALIGN="middle">
  <TR bgColor="#f0f0f0">
    <TD>***** Stream Checksum Error</TD>
  </TR>
  <TR bgColor="#c0c0c0">
    <TD>***** May be have lost trace info, sequence are not correlatives</TD>
  </TR>
</TABLE>

<HR>

In the instrumented application two particular trace events could be used to better 
trace visualization, #RKH_TE_FWK_OBJ and #RKH_TE_FWK_SIG.

#RKH_TE_FWK_OBJ:
\n Associates the address of the object, in memory with its symbolic name.
Using the RKH_TR_FWK_OBJ() macro in application source code looks like:

\code
...
	static int g_status; 
	static RKHT_T tdll; 

(1)	RKH_TR_FWK_OBJ( &g_status );
(2)	RKH_TR_FWK_OBJ( &tdll );
\endcode

Explanation:

\li (1-2) The RKH_TR_FWK_OBJ() macro associates the object memory address 
		with its symbolic name. This macro also performs the trace event 
		recording to local stream.

#RKH_TE_FWK_SIG:
\n Associates the numerical value of the event signal to the symbolic name of 
the signal.
Using the RKH_TR_FWK_OBJ() macro in application source code looks like:

\code
	// in the dedicated application header file resides the signal enumeration

	enum
	{
		...
		PWR_FAIL,
		PRESS_ENTER,
		...
	};

	// frequently, the macro RKH_TR_FWK_SIG() is used in the \b main.c file.

(1) RKH_TR_FWK_SIG( PWR_FAIL );
(2) RKH_TR_FWK_SIG( PRESS_ENTER );
\endcode

Explanation:

\li (1-2) The RKH_TR_FWK_SIG() macro associates the numerical value of the 
		event signal to the symbolic name of the signal. This macro also 
		performs the trace event recording to local stream.

RKH user must generate this particulars trace events as described in RKHTRACE 
and Trazer will take care of reemplacing the numeric values by the user 
definition.

<HR>
\section trazer_human_format Human readable output

Trazer is a console program that converts the trace stream data in a human-readable format. Following is shown how its output looks like.\n
Trazer start showing version and compatibility with RKH framework, below are displayed the current Trazer configuration. For this example the trace.bin is used as trace data source.\n Each identified trace show:\n

- \b Timestamp, in CPU ticks. The number of bytes used by the timestamp is 
configurable by the macro TRAZER_SIZEOF_TSTAMP. See the 
TRAZER_EN_TSTAMP option.

- <b>Sequence number</b>, the target component increments this number for 
every frame inserted into the stream. The sequence number allows the trazer 
tool to detect any data discontinuities. See the \b TRAZER_EN_NSEQ option.

- <b>System service group name</b>.

- <b>Trace event alias</b>, which is one of the predefined RKH records or an 
application-specific record.

- \b Args, data asociated with the event.

Sequences 4, 5 and 6 are examples of #RKH_TE_FWK_OBJ and #RKH_TE_FWK_SIG events. 
After, sequences 16, 17, 32 and 33, show how Trazer identify object address 
and signal number replacing them by its symbolic representation. 
In case that no symbolic representation has been defined for a particular 
object, (null) will be shown, and in same manner the numeric value for signals.

\verbatim

TRAZER Visualization Tool V2.0 compatible with RKH V2.3
Date = Jan  30 2013 13:46:48

Trace Setup

   Trace events quantity = 45
   TRAZER_SIZEOF_SIG     = 1
   TRAZER_SIZEOF_TSTAMP  = 4
   TRAZER_SIZEOF_POINTER = 4
   TRAZER_SIZEOF_NTIMER  = 2
   TRAZER_SIZEOF_NBLOCK  = 1
   TRAZER_SIZEOF_NELEM   = 1
   TRAZER_SIZEOF_ESIZE   = 2
   TRAZER_EN_NSEQ        = 1
   TRAZER_EN_CHK         = 1
   TRAZER_EN_TSTAMP      = 1

-------- Parsing trace stream from file trace.bin --------

        84 [  0] MP  | INIT            : mp=(null), nblock=16
        84 [  1] RKH | EPOOL_REG       : epix =1, ssize=64, esize=4
        84 [  2] MP  | INIT            : mp=(null), nblock=4
        84 [  3] RKH | EPOOL_REG       : epix =2, ssize=32, esize=8
        84 [  4] RKH | SYM_OBJ         : obj=0x01091780, sym=&rkheplist[0]
        84 [  5] RKH | SYM_OBJ         : obj=0x01091794, sym=&rkheplist[1]
        84 [  6] RKH | SYM_SIG         : sig=1, sym=ONE
        84 [  7] RQ  | INIT            : rq=(null), sma=(null), nelem=4
        84 [  8] SMA | REGISTER        : sma=(null), prio=0
        84 [  9] SM  | INIT            : sma=(null), istate=(null)
        84 [ 10] TIM | INIT            : timer=(null), sig=(null)
        84 [ 11] SM  | ENTRY_STATE     : sma=(null), state=(null)
        84 [ 12] SM  | ENTRY_STATE     : sma=(null), state=(null)
        84 [ 13] SM  | ENTRY_STATE     : sma=(null), state=(null)
        84 [ 14] SMA | ACTIVATE        : sma=(null)
        86 [ 15] RKH | ENTER           :
      1509 [ 16] MP  | GET             : mp=&rkheplist[1], nfree=3
      1509 [ 17] RKH | ALLOC_EVENT     : esize=6, sig=ONE
      1509 [ 18] RQ  | POST_FIFO       : rq=(null), nused=1
      1509 [ 19] SMA | POST_FIFO       : sma=(null), sig=ONE
      1509 [ 20] RQ  | GET_LAST        : rq=(null)
      1509 [ 21] SMA | GET_EVENT       : sma=(null), sig=ONE
      1509 [ 22] SM  | DISPATCH        : sma=(null), sig=ONE
      1509 [ 23] SM  | TRANSITION      : sma=(null), sstate=(null), tstate=(null)
      1509 [ 24] SM  | COMP_STATE      : sma=(null), state=(null)
      1509 [ 25] SM  | NUM_EN_EX       : sma=(null), nentry=1, nexit=1
      1509 [ 26] SM  | EXIT_STATE      : sma=(null), state=(null)
      1509 [ 27] SM  | NUM_TRN_ACT     : sma=(null), ntrnaction=1
      1509 [ 28] SM  | ENTRY_STATE     : sma=(null), state=(null)
      1509 [ 29] SM  | CURRENT_STATE   : sma=(null), state=(null)
      1509 [ 30] SM  | DISPATCH_RCODE  : sma=(null), retcode=RKH_OK
      1509 [ 31] RKH | GC_RECYCLE      : sig=ONE
      1509 [ 32] MP  | PUT             : mp=&rkheplist[1], nfree=4
      1905 [ 33] MP  | GET             : mp=&rkheplist[1], nfree=3
      1905 [ 34] RKH | ALLOC_EVENT     : esize=6, sig=(null)
      1905 [ 35] RQ  | POST_FIFO       : rq=(null), nused=1

\endverbatim
*/

