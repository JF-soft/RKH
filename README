
Overview

RKH is a generic, flexible, modular, highly portable, ANSI-C compliant, 
and open-source development tool for implementing hierarchical 
state machines based on modern state machine concepts. This modern 
techniques are used to give an abstract description of the dynamic 
behavior of a system in a substantial manner.

------------------------------------------------------------------------------

The main features of RKH

- State machines representation is based on state tables.
- Representing a state machine with RKH is intuitive, and easy.
- Reflects the state diagram without obfuscation.
- The RKH application are highly maintainable.
- Easy to integrate with any event queuing and dispatching mechanism.
- Useful in embedded systems.
- The most of the RKH implementation is independent of any particular CPU, 
operating system, or compiler.
- Flexible and user-configurable code generation.
- Very small footprint.
- Include a dispatching event mechanism based on active object's priority.
- Include a queue module
- Include a software timer module.
- Include a fixed-size memory block module.
- Include a native tracing tool.
- Support hierarchically nested states, and flat state machine.
- Support multiple state machines.
- Support conditional, junction, and history pseudostates.
- Support compound transitions with guards.
- Support submachine state.
- Support local transitions.
- Support the entry and exit actions.
- Implement the traditional transition sequence.
- Include mechanism for deferring events.
- Support event dispatching with parameters.
- Include dynamic events.
- Support a easy way to use events with arguments.
- Support systems-friendly assertion macros like assert, allege, error, 
require, and ensure.

------------------------------------------------------------------------------

Purpose and inspiration

For many years, I had been used the traditional state-machine concepts 
based on state-table strategy for modeling the dynamic behavior of several 
reactive-systems, in many industries. Over the years, this implementation 
was expanding its abilities to support system requirements increasingly 
complex, achieving hierarchically nested states, pseudostates, compound 
transitions, and more, proposed by Harel Statecharts.

The RKH not implements neither entire UML specs. nor entire Statechart 
specs. Instead, the RKH intention is to support just enough basic concepts 
of that powerful tools to facilitate the reactive-system modeling holding 
a solid, and efficient implementation. Broadly speaking, the RKH 
implementation has been designed from the ground up to be used in 8-bits 
platforms but can be easily adapted to 16 or 32-bits platforms.

------------------------------------------------------------------------------

Other implementations

Open-source frameworks that support Statecharts.

Quantum Leap - http://www.state-machine.com/ 
Intelliwizard - http://www.intelliwizard.com/ 

------------------------------------------------------------------------------

Licensing

Copyright (C) 2010 Leandro Francucci. All rights reserved.

RKH is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

RKH is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RKH package. If not, see <http://www.gnu.org/licenses/>.

(*) Observe that, the GPLv3 can be used for research & development and educational purposes (academic purposes). 
(**) When the source code of your application should not be published under the GNU GPLv3 license (closed source code), please, contact contact me. See Contact information section.

------------------------------------------------------------------------------

Contact information:

RKH web site: http://sourceforge.net/projects/rkh-reactivesys/
e-mail: francuccilea@gmail.com

------------------------------------------------------------------------------
	
RKH changelog file.

This file resumes the changes across project version releases.

Changes between V2.2 and V2.3 released 02/05/2013

+	Change the runtime trace filter.
+	Change the software timer module.
+	Fix the linux port.
+	Add arbitrary trace records to be used in the application space.
+	Add the configuration option RKH_TRC_EN_USER_TRACE for enabling/disabling 
	the user trace records.
+	Add the macro RKH_TR_FWK_TUSR() for sending to Trazer a symbolic name of 
	the user-defined trace event.
+	Add macro RKH_TR_FWK_TCFG() to send the trace configuration parameters to 
	Trazer.
+ 	Moves the configurations RKH_EN_SMA_THREAD, RKH_EN_SMA_THREAD_DATA, 
	RKH_EN_NATIVE_SCHEDULER, RKH_EN_NATIVE_EQUEUE, RKH_EN_NATIVE_DYN_EVENT, 
	and RKH_EN_REENTRANT from rkhcfg.h to rkhport.h file to achieve the 
	platform independence in rkhcfg.h file.
+	Updated trazer docs.
+	Eliminated RKH_TIM_EN_RESTART from rkhcfg.h.
+	Add RKH_TRC_EN_ASSERT configuration to rkhcfg.h file, RKH_TE_FWK_ASSERT 
	trace record and RKH_TR_FWK_ASSERT() macro to RKHASSERT() macro.

Changes between V2.1 and V2.2 released 08/13/2012

+	Elimate RKH_MP_QUERY definition and change RKH_MP_GET_BLKSIZE to 
	RKH_MP_GET_BSIZE.
+	Add S08 port files.
+	Delete the CRR() macro.
+	Add a active object runtime filter to emmit or suppress all events 
	from a specified AO, by means of RKH_FILTER_ON_SMA() and 
	RKH_FILTER_OFF_SMA() macros. See the main.c demo file. Used to clean 
	up the trazer output.
+	Change the args of RKHREQUIRE() macro in rkh_sma_register() function.
+	Add RKH_TRC_FLUSH() macro in RKH_TRCR_RKH_OBJ() and RKH_TRCR_RKH_SIG().
+	Fix the name of the deplete queue (rkh_rq_deplete()).
+	Add CCE() macro.
+	Add RKH_RESERVE() macro.
+	Fix the RKH_TRC_CLOSE() macro.
+	Delete trazer.c and trazer.h files.
+	Add tcptrc.c and tcptrc.h files to demo projects.
+	Add support to trazer program in ahsm and subm projects.
+	Add RKH_TRC_OPEN, RKH_TRC_CLOSE, and RKH_TRC_FLUSH.
+	Add CV() macro.
+	Fix a bug in rkhtim.c file. Complete the RKH_SET_THOOK() macro when 
	configuring RKH_TIM_EN_HOOK = 0.
+	Change 80x86 port files. Relocate the event pool from rkhport.c to 
	bsp.c file, in rkh_hk_start() hook function. Now, the usage of event 
	pools is resposability of the application.
+	Fix a bug in RKH_SMA_BLOCK() macro.
+	Fix a bug in rkh_rq_get() function, when invocking the rkh_recall() 
	function.
+	Fix a bug in rkh_tim_restart() function RKHREQUIRE() args.
+	Fix a bug in rkh_defer() function. Also, include an internal macro 
	RKH_INC_REF() to avoid the dependence of dynamic event in deferral 
	mechanism.
+	Fix a bug in rkh_add_tr_action() function.

Changes between V2.0 and V2.1 released 05/09/2012

+	Added a submachine state and demo application "subm" to illustrate 
	the submachine usage.

Changes between V1.1.6 and V2.0 released 04/13/2012

+	Added a platform abstraction layer.
+	Added queue, software timer and dynamic memory modules.
+	Added a dispatching event mechanism based on active object's priority.
+	Because of applied drastic changes this release is not compatible 
	with previous releases.

Changes between V1.1.6 and V1.1.5 released 02/13/2012

+	Fixed bug in call rkhallege() macro.
+	Fixed bug in rkhallege(), rkhrequire(), rkhensure(), and rkhinvariant() macro.

Changes between V1.1.4 and V1.1.5 released 02/01/2012

+	Added support for Codewarrior Coldfire V1.
+	Added RKH_DCLR_STATIC_EVENT macro to declare and initialize a event object as one static event.
+	Added a new configuration option RKH_EN_STATE_ID to reduce the state structure.
+	Added RKH_DCLR_SM_GLOBAL macro to declare a state machine object as global pointer.
+	Added assertions within rkh.c module.
+	Added assertion events in rkhtrace.h.
+	Added definition of rkh_trace_getts() in rkhtrace.h.
+	Added condition #if RKH_EN_DYNAMIC_EVENT == 1 to include rkh_put_fifo() and rkh_put_lifo() functions.
+	Added checks every config. options from rkhcfg.h in rkhitl.h.
+	Enhanced tested version of rkh_engine() function with TEST_GUARD option, see code.
+	Tested version of rkh_engine() function with TEST_GUARD option, see code.
+	Fixed rkh_tropen, rkh_trclose, rkh_trflush and rkh_trgetts macro definitions.
+	Fixed rkh_tropen, rkh_trclose, rkh_trflush and rkh_trgetts macro definitions.
+	Changed internal RKH_T structure definition to reduce the use of precious RAM when instantiating a state machine.
+	Added: if is not defined RKH_EN_DOXYGEN then RKH_EN_DOXYGEN = 0
+	Added RKH_EN_RT_INIT_HSM_OBJ preprocessor option to include rkh_init_hsm_obj() function. Frequently, this function is not used.
+	Added rkh_init_hsm_obj() function to initialize a RKH_T structure in runtime.
+	Changed RKH_CREATE_HSM and RKH_DCLR_HSM macros to implement a easy way for deriving state machine structures from RKH_T.
+	Added dynamic and defer event support. This facility is implemented by means of 
	rkh_ae(), rkh_gc(), rkh_put_fifo(), rkh_put_lifo(), rkh_defer() and rkh_recall() and
	added member dynamic_ to RKHEVT_T structure.
+	Changed rkh.h file name to rkhitl.h.
+	Changed rkhsm.h file name to rkh.h.
+	Added rkh_enter_critical() and rkh_exit_critical() to be defined within rkhport.h 
	file.
+	Added assert feature. This facility is defined in rkhassert.h file.
+	Eliminated rkhdata.h dependence from rkhtrace.c and rkh.c files.
+	Added RKH_NUM_STATE_MACHINES directive in rkhcfg.h and rkhtrace.c files.
+	Added enhanced checks to platform-dependent functions within rkhtrace.h.
+	Added mksevt() macro.

Changes between V1.1.3 and V1.1.4 released 06/10/2011

+	Changed RKHPPRO_T type to support pointer to HSM as argument.
+	Added RKH_EN_PPRO_HSM_ARG configuration.
+	Added RKH_HPPTY_T enumeration to be used in RKH_CREATE_HSM() macro.
+	Update demo and doc files.

Changes between V1.1.2 and V1.1.3 released 05/19/2011

+	Changed RKHEVT_T data type.
+	Added rkh_get_sdata() macro to rkhsm.h file.
+	Added state's abstract data by means of single inheritance.
+	Update demo and doc files.

Changes between V1.1.0 and V1.1.2 released 05/05/2011

+	Changed external transition to local transition support. Therefore, 
	just modified rkh_define_ex_en_states() macro to support this feature 
	according to UML 2.0.
+	Modified demo directory to test local transition feature and added 
	some improvements to main.c file.
+	Fixed and update doc files.

Changes between V1.0.0 and V1.1.0 released 05/03/2011

+	Added rkh_else function to be used when if all the guards on 
	the other branches are false.
+	Changed conditional (branch) pseudostate related macros. Therefore, 
	the demo and doc files too.
+	Changed macros RKH_CREATE_*_STATE, RKH_CREATE_TRANS_TABLE and 
	RKH_END_TRANS_TABLE. 
+	Fixed VC08 project settings.
+	Changed demo files.
