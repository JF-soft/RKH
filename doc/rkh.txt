#
#	RKH doc file.
#
#

/**
\anchor main_page
\mainpage RKH Reference Manual
\image html rkh_super_bunner.jpg


\n
<EM> "A behavioral description of a system specifies dynamic aspects of the
entire system or of a particular function, including control and timming.
It specifies the states and modes that the system might reside in and
the transitions between them. It also describes what causes activities
to start and stop, and the way the system reacts to various events.
A natural technique for describing the dynamic of a system is to use
a finite state machine. The described system of function is always
in one of a finite set of states. When an event occurrs, the system
reacts by performing actions. The events causing the reaction are called
triggers."

David Harel</EM>
\n\n This manual includes:

- \ref Overview
- \ref Purpose
- \ref qref
- \ref Installation
- \ref Porting
- \ref cfg
- \ref Usage
- \ref dbg
- \ref Download
- \ref Others
- \ref Resources
- \ref Licensing
- \ref ack

<HR>
\section Overview Overview

RKH is a generic, flexible, modular, highly portable, ANSI-C compliant, 
and open-source development tool for implementing hierarchical 
state machines based on modern state machine concepts. This modern 
techniques are used to give an abstract description of the dynamic 
behavior of a system in a substantial manner.

<STRONG> The key features of the RKH framework: </STRONG>

- State machines representation is based on state tables.
- Representing a state machine with RKH is intuitive, and easy.
- Reflects the state diagram without obfuscation.
- The RKH application are highly maintainable.
- Easy to integrate with any event queuing and dispatching mechanism.
- Useful in embedded systems.
- The most of the RKH implementation is \ref Porting "independent of any particular CPU, operating system, or compiler".
- Flexible and \ref cfg "user-configurable code generation".
- Very small footprint.
- Include a \link rkhs.h dispatching event mechanism \endlink based on active object's priority.
- Include a \link rkhrq.h queue module \endlink
- Include a \link rkhtim.h software timer module \endlink.
- Include a \link rkhmp.h fixed-size memory block module \endlink.
- Include a native \ref dbg.
- Support hierarchically nested states, and flat state machine.
- Support multiple state machines.
- Support conditional, junction, and history pseudostates.
- Support compound transitions with guards.
- Support local transitions.
- Include mechanism for \link rkh_defer() deferring events\endlink.
- Support \link RKHEVT_T event dispatching with parameters\endlink.
- Include \link RKHEVT_T dynamic events\endlink.
- Support a easy way to use \link RKHEVT_T events with arguments\endlink.
- Support systems-friendly \link RKHASSERT() assertion\endlink macros like assert, allege, error, require, and ensure.


<HR>
\section Purpose Purpose and inspiration

For many years, I had been used the traditional state machine concepts
based on state table strategy for modeling the dynamic behavior of several 
reactive-systems, in many industries. Over the years, this implementation
was expanding its abilities to support system requirements increasingly 
complex, achieving hierarchically nested states, pseudostates, compound
transitions, and more, proposed by Harel Statecharts.

The RKH not implements neither entire UML specs. nor entire Statechart specs.
Instead, the RKH intention is to support just enough basic concepts of that
powerful tools to facilitate the reactive-system modeling holding a solid,
and efficient implementation. Broadly speaking, the RKH implementation has
been designed from the ground up to be used in 8-bits platforms but can be
easily adapted to 16 or 32-bits platforms.


<HR>
\section Download Download

RKH download: http://sourceforge.net/projects/rkh-reactivesys/ 

<HR>
\section Others Other implementations

Open-source frameworks that support Statecharts.

- Quantum Leap	- http://www.state-machine.com/
- Intelliwizard	- http://www.intelliwizard.com/

<HR>
\section Resources Resources

- M. Samek - "Practical UML Statecharts in C/C++, Second Edition: Event-Driven Programming for Embedded Systems", http://www.state-machine.com/psicc2/
- M. Samek and P. Montgomery - "State-Oriented Programming", http://www.embedded.com/2000/0008/0008feat1.htm
- D. Harel - "Statecharts: A Visual Formalism for Complex Systems", Sci. Comput. Programming 8 (1987), 231-274.
- D. Harel and A. Pnueli - "On the Development of Reactive Systems", in Logics and Models of Concurrent Systems (K. R. Apt, ed.), NATO ASI Series, Vol. F-13, Springer-Verlag, New York, 1985, pp. 477-498.
- D. Harel - "On Visual Formalisms", Comm. Assoc. Comput. Mach. 31:5 (1988), 514-530.
- D. Harel and A. Naamad - "The STATEMATE Semantics of Statecharts", ACM Trans. on Software Engineering Method. 5:4 (October 1996), 293-333. 
- D. Harel and H. Kugler - "The Rhapsody Semantics of Statecharts", Lecture Notes in Computer Science, Vol. 3147, Springer-Verlag, 2004, pp. 325-354

<HR>
\section Licensing Licensing

Copyright (C) 2010 Leandro Francucci. All rights reserved.

RKH is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

RKH is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with RKH package. If not, see <http://www.gnu.org/licenses/>.

<b>Commercial Licenses</b>

When the source code of your application should not be published under the 
GNU GPLv3 license, you can use one of the following commercial licenses:

<TABLE SUMMARY="RKH commercial licenses" cellSpacing=4 cellPadding=1 border=0
ALIGN="center" VALIGN="middle">
  <TR bgColor="#c8cedc">
    <TD><B>&nbsp;License</B></TD>
    <TD><B>&nbsp;Explanation</B></TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>Single Product</TD>
    <TD>A Single Product License enables the user to embed a RKH framework 
	into one end customer product. This license is perpetual for the 
	life of the customer's product and is without limitation in production 
	quantity. This license is specific to the processor used AND the specific 
	name and model of the customer end product.</TD>
  </TR>

  <TR bgColor="#c0c0c0">
    <TD>Product Line</TD>
    <TD>A Product Line License allows the user to embed a RKH framework into 
	any number of end products within a product family and manufacture an 
	unlimited number of units of each of these products for the life of the 
	end product within the product family.</TD>
  </TR>

  <TR bgColor="#f0f0f0">
    <TD>CPU-Type</TD>
    <TD>A CPU-Type License allows the user to embed a RKH framework into any 
	number of end products using a single and specific processor type. The 
	license holder may manufacture an unlimited number of units of each of 
	these products for the life of the end product.</TD>
  </TR>

  <TR bgColor="#c0c0c0">
    <TD>Entreprise</TD>
    <TD>A Enterprise License allows the user to embed a RKH framework into 
	any end product that uses any CPU as long as the products are designed 
	from a single site. The user is able to manufacture an unlimited number 
	of units from any location worldwide.</TD>
  </TR>
</TABLE>

<em>End-Product definition</em>

An End-Product license refers to a product manufactured by the licensee using 
one or more software components provided by Micriµm. Each end-product is 
assumed to contain a single microprocessor, microcontroller or DSP.

<em>Site definition</em>

A site is defined as license facilities where a product is being developed 
and may consist of multiple buildings located within a two (2) mile radius 
building one or more End-Products.

<b>Technical support</b>

Every commercial license includes one (1) year of technical support. 
Additionally to the unlimited e-mail support, the commercial support 
entitles the Licensee to upgrading any licensed QP component to any newer 
version that Quantum Leaps might release during the Support Term. The 
original one-year Support Term can be extended annually, as described in 
Section "Extended Support". After the expiration of the Support Term, the 
Licensee can no longer upgrade the software under this particular license, 
although the Licensee retains the right to use any version of the software 
released within the Support Term.

Business Model: Many first-generation open source vendors 
(e.g., Linux companies) build their business model on a free product and 
paid support, while Quantum Leaps charges for the product and offers free 
1-year technical support for every commercially licensed product. As a 
consequence, we are highly motivated to keep our software free of bugs, 
easy to use, and to supply good documentation with many examples to minimize 
our support load and expenses. This is in contrast to many first-generation 
open-source vendors, where such strategy would actually lower their revenue 
and profit from support contracts. 

<b>Common to all RKH Licenses</b>

- 	All are perpetual for the life of the customers product.
- 	All are royalty free – customer can build unlimited quantities of 
	their product.
- 	One year maintenance is included with each new software component 
	purchase.
- 	Subsequent years of maintenance is optional but recommended so that
	updates are continually provided.

<b>Contact information</b>

RKH web site:	http://sourceforge.net/projects/rkh-reactivesys/
\n e-mail:		francuccilea@gmail.com

<HR>
\section ack Acknowlegments

I would like to thank to Eduardo Martinez for introducing me to the reactive
systems problems and Dario Balina for they suggestions, they time, and 
constructive criticism during lengthy period in which the RKH project 
was being developed.

*/

